name = "lapce-go"
version = "2024.1.0"
author = "panekj"
display-name = "Go (gopls)"
description = "Go for Lapce using gopls"
wasm = "lapce-go.wasm"
icon = "Go-Logo_LightBlue.svg"
repository = "https://github.com/lapce-community/lapce-go"

[activation]
language = ["go"]
workspace-contains = [
  "*/go.work",
  "*/go.mod",
  "*/**.go",
  "*/*/**.go",
  "*/*/*/**.go",
]

[config."volt.serverPath"]
default = ""
description = "Path to custom Go LSP executable"

[config."volt.serverArgs"]
default = []
description = "Arguments to pass to custom Go LSP executable"

[config."gopls.buildFlags"]
default = []
description = "buildFlags is the set of flags passed on to the build system when invoked. It is applied to queries like `go list`, which is used when discovering files. The most common use is to set `-tags`."

[config."gopls.env"]
default = {}
description = "env adds environment variables to external commands run by `gopls`, most notably `go list`."

[config."gopls.directoryFilters"]
default = ["-node_modules"]
description = """
directoryFilters can be used to exclude unwanted directories from the workspace. By default, all directories are included. Filters are an operator, `+` to include and `-` to exclude, followed by a path prefix relative to the workspace folder. They are evaluated in order, and the last filter that applies to a path controls whether it is included. The path prefix can be empty, so an initial `-` excludes everything.

# Examples:
#     Exclude node_modules: `-node_modules`

#     Include only project_a: `-` (exclude everything), `+project_a`

#     Include only project_a, but not node_modules inside it: `-`, `+project_a`, `-project_a/node_modules`
# """

[config."gopls.templateExtensions"]
default = []
description = "templateExtensions gives the extensions of file names that are treateed as template files. (The extension is the part of the file name after the final dot.)"

[config."gopls.memoryMode"]
default = "Normal"
description = """
This setting is experimental and may be deleted.

memoryMode controls the tradeoff gopls makes between memory usage and correctness.
Values other than Normal are untested and may break in surprising ways.

Must be one of:
- `"DegradeClosed"`: In DegradeClosed mode, `gopls` will collect less information about packages without open files. As a result, features like Find References and Rename will miss results in such packages.
- `"Normal"`
"""

[config."gopls.expandWorkspaceToModule"]
default = true
description = """
This setting is experimental and may be deleted.

expandWorkspaceToModule instructs `gopls` to adjust the scope of the workspace to find the best available module root. gopls first looks for a go.mod file in any parent directory of the workspace folder, expanding the scope to that directory if it exists. If no viable parent directory is found, gopls will check if there is exactly one child directory containing a go.mod file, narrowing the scope to that directory if it exists.
"""

[config."gopls.experimentalWorkspaceModule"]
default = false
description = """
This setting is experimental and may be deleted.

experimentalWorkspaceModule opts a user into the experimental support for multi-module workspaces.
"""

[config."gopls.experimentalPackageCacheKey"]
default = true
description = """
This setting is experimental and may be deleted.

experimentalPackageCacheKey controls whether to use a coarser cache key for package type information to increase cache hits. This setting removes the user's environment, build flags, and working directory from the cache key, which should be a safe change as all relevant inputs into the type checking pass are already hashed into the key. This is temporarily guarded by an experiment because caching behavior is subtle and difficult to comprehensively test.
"""

[config."gopls.allowModfileModifications"]
default = false
description = """
This setting is experimental and may be deleted.

allowModfileModifications disables -mod=readonly, allowing imports from out-of-scope modules. This option will eventually be removed.
"""
